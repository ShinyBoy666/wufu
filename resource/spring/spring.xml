<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/jee
	http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-3.0.xsd
	http://www.springframework.org/schema/context     
    http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
    
	<context:component-scan base-package="cn.xinmeng.**" />
	
	<!-- 项目配置文件地址 -->
	<bean id="propertiesPath" class="java.lang.String">
        <constructor-arg value="dev"/>
    </bean>
    
    <bean class="cn.xinmeng.common.util.LoadLogFile">
    	<constructor-arg value="#{propertiesPath}"/>
    </bean>
	
	<!-- bean 方式配置 属性文件 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="fileEncoding" value="UTF-8" />
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="locations">
			<list>
				<value>classpath:#{propertiesPath}/config-system.properties</value>
				<value>classpath:#{propertiesPath}/config-address.properties</value>
				<value>classpath:#{propertiesPath}/config-db.properties</value>
				<value>classpath:#{propertiesPath}/config-redis.properties</value>
				<value>classpath:#{propertiesPath}/mail.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">   
	    <!-- 配置初始化大小、最小、最大 -->  
	    <property name="initialSize" value="1" />  
	    <property name="minIdle" value="1" />   
	    <property name="maxActive" value="20" />  
	    <!-- 配置获取连接等待超时的时间 -->  
	    <property name="maxWait" value="60000" />  
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />  
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
	    <property name="minEvictableIdleTimeMillis" value="300000" />  
	    <property name="validationQuery" value="SELECT 'x'" />  
	    <property name="testWhileIdle" value="true" />  
	    <property name="testOnBorrow" value="false" />  
	    <property name="testOnReturn" value="false" />  
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->  
	    <property name="poolPreparedStatements" value="true" />  
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />  
	    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->  
	    <property name="filters" value="stat" />   
	</bean>  

	<!-- mysql 数据源配置 - 业务库(masterDataSource)配置 -->
	<bean id="masterDataSource" parent="dataSource">
		<property name="url" value="${master.jdbc.url}" />
		<property name="username" value="${master.jdbc.user_name}" />
		<property name="password" value="${master.jdbc.password}" />
	</bean>

	<!-- mysql 数据源配置 - 从业务库(slaveDataSource)配置 -->
	<bean id="slaveDataSource" parent="dataSource">
		<property name="url" value="${slave.jdbc.url}" />
		<property name="username" value="${slave.jdbc.user_name}" />
		<property name="password" value="${slave.jdbc.password}" />
	</bean>
	
	
	<!--动态数据源 - 配置 -->
	<bean id="dataSource_dynamic" class="cn.xinmeng.common.db.DynamicDataSource">
		<property name="targetDataSources">
			<map>
				<entry key="masterDataSource" value-ref="masterDataSource" />
				<entry key="slaveDataSource" value-ref="slaveDataSource" />
			</map>
		</property>
		<!-- 默认数据源  --><!--
		<property name="defaultTargetDataSource" ref="masterDataSource" />  -->
	</bean>
	
	
	<!-- myBatis 相关配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:spring/config/mybatis-config.xml" />
		<property name="mapperLocations" value="classpath:mapper/**/*.xml" />
		<property name="dataSource" ref="dataSource_dynamic" />
	</bean>
	
	
	<!-- 扫描dao对应mapper文件 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.xinmeng.*.dao.*" />
		<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/> -->
	</bean>
	
	
	<!-- 方法拦截，设置动态数据源，对于查询的数据源，进行从数据库操作 -->
	<bean id="dataSourceAspect" class="cn.xinmeng.common.db.DataSourceAspect"/>
	<aop:config>
		<aop:aspect ref="dataSourceAspect">
        	<aop:pointcut id="apiServiceTx" expression="execution(* cn.xinmeng.api.service..*Service*.*(..))"/>
        	<!-- <aop:pointcut id="privilegeServiceTx" expression="execution(* cn.xinmeng.privilege.service..*Service*.*(..))"/> -->
        	<aop:pointcut id="quartzServiceTx" expression="execution(* cn.xinmeng.quartz.service..*Manager*.*(..))"/>
			<aop:before pointcut-ref="apiServiceTx" method="before"/>
			<!-- <aop:before pointcut-ref="privilegeServiceTx" method="privilege"/> -->
			<aop:before pointcut-ref="quartzServiceTx" method="before"/>
		</aop:aspect>
	</aop:config> 
	
	<!-- 数据连接管理 事务配置 只配置主库(master) -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource_dynamic" />
	</bean>
	
 	<!-- 事务拦截 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
     <aop:config>
        <aop:pointcut id="commonServiceOperation" expression="execution(* cn.xinmeng.api.service..*Service*.*(..))"/>
        <aop:advisor pointcut-ref="commonServiceOperation" advice-ref="txAdvice"/>
    </aop:config>
    <!-- <aop:config>
        <aop:pointcut id="privilegeServiceOperation" expression="execution(* cn.xinmeng.privilege.service..*Service*.*(..))"/>
        <aop:advisor pointcut-ref="privilegeServiceOperation" advice-ref="txAdvice"/>
    </aop:config> -->
    
	<!-- 事务注解支持 
	<tx:annotation-driven transaction-manager="transactionManager" />-->
    
	<import resource="classpath*:spring/config/**/spring*.xml" />
	<import resource="classpath*:spring/business/**/*.xml" />
	<import resource="classpath*:spring/controller/**/*.xml" />
	<import resource="classpath*:spring/security/**/*.xml" />
	<import resource="classpath*:spring/job/**/*.xml" />
	<import resource="classpath*:spring/mail/**/*.xml" />
</beans>
