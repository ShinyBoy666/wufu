<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.xinmeng.api.dao.auto.JobHistoryDao">
  <resultMap id="BaseResultMap" type="cn.xinmeng.api.entity.auto.JobHistory">
	    <id column="id" jdbcType="INTEGER" property="id" />
	   <result column="job_id" jdbcType="INTEGER" property="jobId" />
	   <result column="plan_id" jdbcType="INTEGER" property="planId" />
	   <result column="job_name" jdbcType="VARCHAR" property="jobName" />
	   <result column="begin_execution_time" jdbcType="TIMESTAMP" property="beginExecutionTime" />
	   <result column="end_execution_time" jdbcType="TIMESTAMP" property="endExecutionTime" />
	   <result column="execution_long" jdbcType="BIGINT" property="executionLong" />
	   <result column="execution_state" jdbcType="INTEGER" property="executionState" />
	   <result column="execution_info" jdbcType="VARCHAR" property="executionInfo" />
	   <result column="execution_user" jdbcType="VARCHAR" property="executionUser" />
	   <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	   <result column="create_user" jdbcType="VARCHAR" property="createUser" />
	   <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
   </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Base_Column_List">
    id,
    job_id,
    plan_id,
    job_name,
    begin_execution_time,
    end_execution_time,
    execution_long,
    execution_state,
    execution_info,
    execution_user,
    update_time,
    create_user,
    create_time
  </sql>
  
  <select id="selectByPrimaryKey" parameterType="int" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> from j_job_history  where  id = #{id,jdbcType=INTEGER} 
  </select>
  
  <select id="selectByExample" parameterType="cn.xinmeng.api.entity.auto.example.JobHistoryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <choose>
	  	<when test="fieldList != null and fieldList != '' "> ${fieldList} </when>
	  	<otherwise> <include refid="Base_Column_List" /> </otherwise>
  	</choose>
    from  j_job_history
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
   <delete id="deleteByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.example.JobHistoryExample">
     delete from  j_job_history where  id = #{id,jdbcType=INTEGER} 
   </delete>
  
  <delete id="deleteByExample" parameterType="cn.xinmeng.api.entity.auto.example.JobHistoryExample">
    delete from  j_job_history
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  <insert id="insert" parameterType="cn.xinmeng.api.entity.auto.JobHistory" useGeneratedKeys="true" keyProperty="id">
    insert into j_job_history
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="jobId != null">
        job_id,
      </if>
      <if test="planId != null">
        plan_id,
      </if>
      <if test="jobName != null">
        job_name,
      </if>
      <if test="beginExecutionTime != null">
        begin_execution_time,
      </if>
      <if test="endExecutionTime != null">
        end_execution_time,
      </if>
      <if test="executionLong != null">
        execution_long,
      </if>
      <if test="executionState != null">
        execution_state,
      </if>
      <if test="executionInfo != null">
        execution_info,
      </if>
      <if test="executionUser != null">
        execution_user,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    
    <trim prefix="values (" suffix=")" suffixOverrides=",">
    
      <if test="id != null">
        #{ id,jdbcType=INTEGER },
      </if>
      <if test="jobId != null">
        #{ jobId,jdbcType=INTEGER },
      </if>
      <if test="planId != null">
        #{ planId,jdbcType=INTEGER },
      </if>
      <if test="jobName != null">
        #{ jobName,jdbcType=VARCHAR },
      </if>
      <if test="beginExecutionTime != null">
        #{ beginExecutionTime,jdbcType=TIMESTAMP },
      </if>
      <if test="endExecutionTime != null">
        #{ endExecutionTime,jdbcType=TIMESTAMP },
      </if>
      <if test="executionLong != null">
        #{ executionLong,jdbcType=BIGINT },
      </if>
      <if test="executionState != null">
        #{ executionState,jdbcType=INTEGER },
      </if>
      <if test="executionInfo != null">
        #{ executionInfo,jdbcType=VARCHAR },
      </if>
      <if test="executionUser != null">
        #{ executionUser,jdbcType=VARCHAR },
      </if>
      <if test="updateTime != null">
        #{ updateTime,jdbcType=TIMESTAMP },
      </if>
      <if test="createUser != null">
        #{ createUser,jdbcType=VARCHAR },
      </if>
      <if test="createTime != null">
        #{ createTime,jdbcType=TIMESTAMP },
      </if>
    </trim>
  </insert>
  
  <insert id="insertBatch" parameterType="java.util.List">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">  
        SELECT LAST_INSERT_ID() as id
    </selectKey>
    insert into j_job_history 
    (
      job_id,
      plan_id,
      job_name,
      begin_execution_time,
      end_execution_time,
      execution_long,
      execution_state,
      execution_info,
      execution_user,
      update_time,
      create_user,
      create_time
    )
    values
    <foreach collection="list" item="item" index="index" separator="," >  
    (
     #{ item.jobId,jdbcType=INTEGER },
     #{ item.planId,jdbcType=INTEGER },
     #{ item.jobName,jdbcType=VARCHAR },
     #{ item.beginExecutionTime,jdbcType=TIMESTAMP },
     #{ item.endExecutionTime,jdbcType=TIMESTAMP },
     #{ item.executionLong,jdbcType=BIGINT },
     #{ item.executionState,jdbcType=INTEGER },
     #{ item.executionInfo,jdbcType=VARCHAR },
     #{ item.executionUser,jdbcType=VARCHAR },
     #{ item.updateTime,jdbcType=TIMESTAMP },
     #{ item.createUser,jdbcType=VARCHAR },
     #{ item.createTime,jdbcType=TIMESTAMP }
    )  
    </foreach>  
  </insert>
  
  <select id="countByExample" parameterType="cn.xinmeng.api.entity.auto.example.JobHistoryExample" resultType="java.lang.Integer">
    select count(*) from j_job_history
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <update id="updateByExample" parameterType="map">
    update j_job_history set 
	      job_id = #{record.jobId,jdbcType=INTEGER},
	      plan_id = #{record.planId,jdbcType=INTEGER},
	      job_name = #{record.jobName,jdbcType=VARCHAR},
	      begin_execution_time = #{record.beginExecutionTime,jdbcType=TIMESTAMP},
	      end_execution_time = #{record.endExecutionTime,jdbcType=TIMESTAMP},
	      execution_long = #{record.executionLong,jdbcType=BIGINT},
	      execution_state = #{record.executionState,jdbcType=INTEGER},
	      execution_info = #{record.executionInfo,jdbcType=VARCHAR},
	      execution_user = #{record.executionUser,jdbcType=VARCHAR},
	      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
	      create_user = #{record.createUser,jdbcType=VARCHAR},
	      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateByExampleSelective" parameterType="map">
    update j_job_history 
    <set> 
	      <if test="record.jobId != null">
	        job_id = #{record.jobId,jdbcType=INTEGER},
	      </if>
	      <if test="record.planId != null">
	        plan_id = #{record.planId,jdbcType=INTEGER},
	      </if>
	      <if test="record.jobName != null">
	        job_name = #{record.jobName,jdbcType=VARCHAR},
	      </if>
	      <if test="record.beginExecutionTime != null">
	        begin_execution_time = #{record.beginExecutionTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.endExecutionTime != null">
	        end_execution_time = #{record.endExecutionTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.executionLong != null">
	        execution_long = #{record.executionLong,jdbcType=BIGINT},
	      </if>
	      <if test="record.executionState != null">
	        execution_state = #{record.executionState,jdbcType=INTEGER},
	      </if>
	      <if test="record.executionInfo != null">
	        execution_info = #{record.executionInfo,jdbcType=VARCHAR},
	      </if>
	      <if test="record.executionUser != null">
	        execution_user = #{record.executionUser,jdbcType=VARCHAR},
	      </if>
	      <if test="record.updateTime != null">
	        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.createUser != null">
	        create_user = #{record.createUser,jdbcType=VARCHAR},
	      </if>
	      <if test="record.createTime != null">
	        create_time = #{record.createTime,jdbcType=TIMESTAMP},
	      </if>
	</set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateSelectiveByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.JobHistory">
    update j_job_history 
    <set> 
	      <if test="jobId != null">
	        job_id = #{jobId,jdbcType=INTEGER},
	      </if>
	      <if test="planId != null">
	        plan_id = #{planId,jdbcType=INTEGER},
	      </if>
	      <if test="jobName != null">
	        job_name = #{jobName,jdbcType=VARCHAR},
	      </if>
	      <if test="beginExecutionTime != null">
	        begin_execution_time = #{beginExecutionTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="endExecutionTime != null">
	        end_execution_time = #{endExecutionTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="executionLong != null">
	        execution_long = #{executionLong,jdbcType=BIGINT},
	      </if>
	      <if test="executionState != null">
	        execution_state = #{executionState,jdbcType=INTEGER},
	      </if>
	      <if test="executionInfo != null">
	        execution_info = #{executionInfo,jdbcType=VARCHAR},
	      </if>
	      <if test="executionUser != null">
	        execution_user = #{executionUser,jdbcType=VARCHAR},
	      </if>
	      <if test="updateTime != null">
	        update_time = #{updateTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="createUser != null">
	        create_user = #{createUser,jdbcType=VARCHAR},
	      </if>
	      <if test="createTime != null">
	        create_time = #{createTime,jdbcType=TIMESTAMP},
	      </if>
	</set>
	where  id = #{id,jdbcType=INTEGER} 
  </update>
  
  <update id="updateByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.JobHistory">
    update j_job_history set
        job_id = #{jobId,jdbcType=INTEGER},
        plan_id = #{planId,jdbcType=INTEGER},
        job_name = #{jobName,jdbcType=VARCHAR},
        begin_execution_time = #{beginExecutionTime,jdbcType=TIMESTAMP},
        end_execution_time = #{endExecutionTime,jdbcType=TIMESTAMP},
        execution_long = #{executionLong,jdbcType=BIGINT},
        execution_state = #{executionState,jdbcType=INTEGER},
        execution_info = #{executionInfo,jdbcType=VARCHAR},
        execution_user = #{executionUser,jdbcType=VARCHAR},
        update_time = #{updateTime,jdbcType=TIMESTAMP},
        create_user = #{createUser,jdbcType=VARCHAR},
        create_time = #{createTime,jdbcType=TIMESTAMP}
    where  id = #{id,jdbcType=INTEGER} 
  </update>
</mapper>