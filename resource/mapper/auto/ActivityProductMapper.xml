<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.xinmeng.api.dao.auto.ActivityProductDao">
  <resultMap id="BaseResultMap" type="cn.xinmeng.api.entity.auto.ActivityProduct">
	    <id column="id" jdbcType="INTEGER" property="id" />
	   <result column="activity_id" jdbcType="INTEGER" property="activityId" />
	   <result column="product_id" jdbcType="INTEGER" property="productId" />
	   <result column="activity_type" jdbcType="INTEGER" property="activityType" />
	   <result column="product_price_id" jdbcType="INTEGER" property="productPriceId" />
	   <result column="product_activity_price" jdbcType="DOUBLE" property="productActivityPrice" />
	   <result column="product_price" jdbcType="DOUBLE" property="productPrice" />
	   <result column="product_number" jdbcType="INTEGER" property="productNumber" />
	   <result column="sold_number" jdbcType="INTEGER" property="soldNumber" />
	   <result column="max_buy" jdbcType="INTEGER" property="maxBuy" />
	   <result column="state" jdbcType="INTEGER" property="state" />
	   <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
	   <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
   </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Base_Column_List">
    id,
    activity_id,
    product_id,
    activity_type,
    product_price_id,
    product_activity_price,
    product_price,
    product_number,
    sold_number,
    max_buy,
    state,
    create_time,
    update_time
  </sql>
  
  <select id="selectByPrimaryKey" parameterType="int" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> from m_activity_product  where  id = #{id,jdbcType=INTEGER} 
  </select>
  
  <select id="selectByExample" parameterType="cn.xinmeng.api.entity.auto.example.ActivityProductExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <choose>
	  	<when test="fieldList != null and fieldList != '' "> ${fieldList} </when>
	  	<otherwise> <include refid="Base_Column_List" /> </otherwise>
  	</choose>
    from  m_activity_product
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
   <delete id="deleteByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.example.ActivityProductExample">
     delete from  m_activity_product where  id = #{id,jdbcType=INTEGER} 
   </delete>
  
  <delete id="deleteByExample" parameterType="cn.xinmeng.api.entity.auto.example.ActivityProductExample">
    delete from  m_activity_product
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  <insert id="insert" parameterType="cn.xinmeng.api.entity.auto.ActivityProduct" useGeneratedKeys="true" keyProperty="id">
    insert into m_activity_product
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="activityId != null">
        activity_id,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="activityType != null">
        activity_type,
      </if>
      <if test="productPriceId != null">
        product_price_id,
      </if>
      <if test="productActivityPrice != null">
        product_activity_price,
      </if>
      <if test="productPrice != null">
        product_price,
      </if>
      <if test="productNumber != null">
        product_number,
      </if>
      <if test="soldNumber != null">
        sold_number,
      </if>
      <if test="maxBuy != null">
        max_buy,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    
    <trim prefix="values (" suffix=")" suffixOverrides=",">
    
      <if test="id != null">
        #{ id,jdbcType=INTEGER },
      </if>
      <if test="activityId != null">
        #{ activityId,jdbcType=INTEGER },
      </if>
      <if test="productId != null">
        #{ productId,jdbcType=INTEGER },
      </if>
      <if test="activityType != null">
        #{ activityType,jdbcType=INTEGER },
      </if>
      <if test="productPriceId != null">
        #{ productPriceId,jdbcType=INTEGER },
      </if>
      <if test="productActivityPrice != null">
        #{ productActivityPrice,jdbcType=DOUBLE },
      </if>
      <if test="productPrice != null">
        #{ productPrice,jdbcType=DOUBLE },
      </if>
      <if test="productNumber != null">
        #{ productNumber,jdbcType=INTEGER },
      </if>
      <if test="soldNumber != null">
        #{ soldNumber,jdbcType=INTEGER },
      </if>
      <if test="maxBuy != null">
        #{ maxBuy,jdbcType=INTEGER },
      </if>
      <if test="state != null">
        #{ state,jdbcType=INTEGER },
      </if>
      <if test="createTime != null">
        #{ createTime,jdbcType=TIMESTAMP },
      </if>
      <if test="updateTime != null">
        #{ updateTime,jdbcType=TIMESTAMP },
      </if>
    </trim>
  </insert>
  
  <insert id="insertBatch" parameterType="java.util.List">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">  
        SELECT LAST_INSERT_ID() as id
    </selectKey>
    insert into m_activity_product 
    (
      activity_id,
      product_id,
      activity_type,
      product_price_id,
      product_activity_price,
      product_price,
      product_number,
      sold_number,
      max_buy,
      state,
      create_time,
      update_time
    )
    values
    <foreach collection="list" item="item" index="index" separator="," >  
    (
     #{ item.activityId,jdbcType=INTEGER },
     #{ item.productId,jdbcType=INTEGER },
     #{ item.activityType,jdbcType=INTEGER },
     #{ item.productPriceId,jdbcType=INTEGER },
     #{ item.productActivityPrice,jdbcType=DOUBLE },
     #{ item.productPrice,jdbcType=DOUBLE },
     #{ item.productNumber,jdbcType=INTEGER },
     #{ item.soldNumber,jdbcType=INTEGER },
     #{ item.maxBuy,jdbcType=INTEGER },
     #{ item.state,jdbcType=INTEGER },
     #{ item.createTime,jdbcType=TIMESTAMP },
     #{ item.updateTime,jdbcType=TIMESTAMP }
    )  
    </foreach>  
  </insert>
  
  <select id="countByExample" parameterType="cn.xinmeng.api.entity.auto.example.ActivityProductExample" resultType="java.lang.Integer">
    select count(*) from m_activity_product
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <update id="updateByExample" parameterType="map">
    update m_activity_product set 
	      activity_id = #{record.activityId,jdbcType=INTEGER},
	      product_id = #{record.productId,jdbcType=INTEGER},
	      activity_type = #{record.activityType,jdbcType=INTEGER},
	      product_price_id = #{record.productPriceId,jdbcType=INTEGER},
	      product_activity_price = #{record.productActivityPrice,jdbcType=DOUBLE},
	      product_price = #{record.productPrice,jdbcType=DOUBLE},
	      product_number = #{record.productNumber,jdbcType=INTEGER},
	      sold_number = #{record.soldNumber,jdbcType=INTEGER},
	      max_buy = #{record.maxBuy,jdbcType=INTEGER},
	      state = #{record.state,jdbcType=INTEGER},
	      create_time = #{record.createTime,jdbcType=TIMESTAMP},
	      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateByExampleSelective" parameterType="map">
    update m_activity_product 
    <set> 
	      <if test="record.activityId != null">
	        activity_id = #{record.activityId,jdbcType=INTEGER},
	      </if>
	      <if test="record.productId != null">
	        product_id = #{record.productId,jdbcType=INTEGER},
	      </if>
	      <if test="record.activityType != null">
	        activity_type = #{record.activityType,jdbcType=INTEGER},
	      </if>
	      <if test="record.productPriceId != null">
	        product_price_id = #{record.productPriceId,jdbcType=INTEGER},
	      </if>
	      <if test="record.productActivityPrice != null">
	        product_activity_price = #{record.productActivityPrice,jdbcType=DOUBLE},
	      </if>
	      <if test="record.productPrice != null">
	        product_price = #{record.productPrice,jdbcType=DOUBLE},
	      </if>
	      <if test="record.productNumber != null">
	        product_number = #{record.productNumber,jdbcType=INTEGER},
	      </if>
	      <if test="record.soldNumber != null">
	        sold_number = #{record.soldNumber,jdbcType=INTEGER},
	      </if>
	      <if test="record.maxBuy != null">
	        max_buy = #{record.maxBuy,jdbcType=INTEGER},
	      </if>
	      <if test="record.state != null">
	        state = #{record.state,jdbcType=INTEGER},
	      </if>
	      <if test="record.createTime != null">
	        create_time = #{record.createTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.updateTime != null">
	        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
	      </if>
	</set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateSelectiveByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.ActivityProduct">
    update m_activity_product 
    <set> 
	      <if test="activityId != null">
	        activity_id = #{activityId,jdbcType=INTEGER},
	      </if>
	      <if test="productId != null">
	        product_id = #{productId,jdbcType=INTEGER},
	      </if>
	      <if test="activityType != null">
	        activity_type = #{activityType,jdbcType=INTEGER},
	      </if>
	      <if test="productPriceId != null">
	        product_price_id = #{productPriceId,jdbcType=INTEGER},
	      </if>
	      <if test="productActivityPrice != null">
	        product_activity_price = #{productActivityPrice,jdbcType=DOUBLE},
	      </if>
	      <if test="productPrice != null">
	        product_price = #{productPrice,jdbcType=DOUBLE},
	      </if>
	      <if test="productNumber != null">
	        product_number = #{productNumber,jdbcType=INTEGER},
	      </if>
	      <if test="soldNumber != null">
	        sold_number = #{soldNumber,jdbcType=INTEGER},
	      </if>
	      <if test="maxBuy != null">
	        max_buy = #{maxBuy,jdbcType=INTEGER},
	      </if>
	      <if test="state != null">
	        state = #{state,jdbcType=INTEGER},
	      </if>
	      <if test="createTime != null">
	        create_time = #{createTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="updateTime != null">
	        update_time = #{updateTime,jdbcType=TIMESTAMP},
	      </if>
	</set>
	where  id = #{id,jdbcType=INTEGER} 
  </update>
  
  <update id="updateByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.ActivityProduct">
    update m_activity_product set
        activity_id = #{activityId,jdbcType=INTEGER},
        product_id = #{productId,jdbcType=INTEGER},
        activity_type = #{activityType,jdbcType=INTEGER},
        product_price_id = #{productPriceId,jdbcType=INTEGER},
        product_activity_price = #{productActivityPrice,jdbcType=DOUBLE},
        product_price = #{productPrice,jdbcType=DOUBLE},
        product_number = #{productNumber,jdbcType=INTEGER},
        sold_number = #{soldNumber,jdbcType=INTEGER},
        max_buy = #{maxBuy,jdbcType=INTEGER},
        state = #{state,jdbcType=INTEGER},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = #{updateTime,jdbcType=TIMESTAMP}
    where  id = #{id,jdbcType=INTEGER} 
  </update>
</mapper>