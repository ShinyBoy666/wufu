<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.xinmeng.api.dao.auto.ShopPostageConfigDao">
  <resultMap id="BaseResultMap" type="cn.xinmeng.api.entity.auto.ShopPostageConfig">
	    <id column="id" jdbcType="INTEGER" property="id" />
	   <result column="shop_id" jdbcType="INTEGER" property="shopId" />
	   <result column="logistics_id" jdbcType="INTEGER" property="logisticsId" />
	   <result column="province_id" jdbcType="INTEGER" property="provinceId" />
	   <result column="province_name" jdbcType="VARCHAR" property="provinceName" />
	   <result column="city_id" jdbcType="INTEGER" property="cityId" />
	   <result column="city_name" jdbcType="VARCHAR" property="cityName" />
	   <result column="postage" jdbcType="DOUBLE" property="postage" />
	   <result column="postage_free" jdbcType="DOUBLE" property="postageFree" />
	   <result column="state" jdbcType="INTEGER" property="state" />
	   <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
	   <result column="create_user" jdbcType="VARCHAR" property="createUser" />
	   <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	   <result column="update_user" jdbcType="VARCHAR" property="updateUser" />
   </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Base_Column_List">
    id,
    shop_id,
    logistics_id,
    province_id,
    province_name,
    city_id,
    city_name,
    postage,
    postage_free,
    state,
    create_time,
    create_user,
    update_time,
    update_user
  </sql>
  
  <select id="selectByPrimaryKey" parameterType="int" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> from s_shop_postage_config  where  id = #{id,jdbcType=INTEGER} 
  </select>
  
  <select id="selectByExample" parameterType="cn.xinmeng.api.entity.auto.example.ShopPostageConfigExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <choose>
	  	<when test="fieldList != null and fieldList != '' "> ${fieldList} </when>
	  	<otherwise> <include refid="Base_Column_List" /> </otherwise>
  	</choose>
    from  s_shop_postage_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
   <delete id="deleteByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.example.ShopPostageConfigExample">
     delete from  s_shop_postage_config where  id = #{id,jdbcType=INTEGER} 
   </delete>
  
  <delete id="deleteByExample" parameterType="cn.xinmeng.api.entity.auto.example.ShopPostageConfigExample">
    delete from  s_shop_postage_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  <insert id="insert" parameterType="cn.xinmeng.api.entity.auto.ShopPostageConfig" useGeneratedKeys="true" keyProperty="id">
    insert into s_shop_postage_config
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="shopId != null">
        shop_id,
      </if>
      <if test="logisticsId != null">
        logistics_id,
      </if>
      <if test="provinceId != null">
        province_id,
      </if>
      <if test="provinceName != null">
        province_name,
      </if>
      <if test="cityId != null">
        city_id,
      </if>
      <if test="cityName != null">
        city_name,
      </if>
      <if test="postage != null">
        postage,
      </if>
      <if test="postageFree != null">
        postage_free,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
    </trim>
    
    <trim prefix="values (" suffix=")" suffixOverrides=",">
    
      <if test="id != null">
        #{ id,jdbcType=INTEGER },
      </if>
      <if test="shopId != null">
        #{ shopId,jdbcType=INTEGER },
      </if>
      <if test="logisticsId != null">
        #{ logisticsId,jdbcType=INTEGER },
      </if>
      <if test="provinceId != null">
        #{ provinceId,jdbcType=INTEGER },
      </if>
      <if test="provinceName != null">
        #{ provinceName,jdbcType=VARCHAR },
      </if>
      <if test="cityId != null">
        #{ cityId,jdbcType=INTEGER },
      </if>
      <if test="cityName != null">
        #{ cityName,jdbcType=VARCHAR },
      </if>
      <if test="postage != null">
        #{ postage,jdbcType=DOUBLE },
      </if>
      <if test="postageFree != null">
        #{ postageFree,jdbcType=DOUBLE },
      </if>
      <if test="state != null">
        #{ state,jdbcType=INTEGER },
      </if>
      <if test="createTime != null">
        #{ createTime,jdbcType=TIMESTAMP },
      </if>
      <if test="createUser != null">
        #{ createUser,jdbcType=VARCHAR },
      </if>
      <if test="updateTime != null">
        #{ updateTime,jdbcType=TIMESTAMP },
      </if>
      <if test="updateUser != null">
        #{ updateUser,jdbcType=VARCHAR },
      </if>
    </trim>
  </insert>
  
  <insert id="insertBatch" parameterType="java.util.List">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">  
        SELECT LAST_INSERT_ID() as id
    </selectKey>
    insert into s_shop_postage_config 
    (
      shop_id,
      logistics_id,
      province_id,
      province_name,
      city_id,
      city_name,
      postage,
      postage_free,
      state,
      create_time,
      create_user,
      update_time,
      update_user
    )
    values
    <foreach collection="list" item="item" index="index" separator="," >  
    (
     #{ item.shopId,jdbcType=INTEGER },
     #{ item.logisticsId,jdbcType=INTEGER },
     #{ item.provinceId,jdbcType=INTEGER },
     #{ item.provinceName,jdbcType=VARCHAR },
     #{ item.cityId,jdbcType=INTEGER },
     #{ item.cityName,jdbcType=VARCHAR },
     #{ item.postage,jdbcType=DOUBLE },
     #{ item.postageFree,jdbcType=DOUBLE },
     #{ item.state,jdbcType=INTEGER },
     #{ item.createTime,jdbcType=TIMESTAMP },
     #{ item.createUser,jdbcType=VARCHAR },
     #{ item.updateTime,jdbcType=TIMESTAMP },
     #{ item.updateUser,jdbcType=VARCHAR }
    )  
    </foreach>  
  </insert>
  
  <select id="countByExample" parameterType="cn.xinmeng.api.entity.auto.example.ShopPostageConfigExample" resultType="java.lang.Integer">
    select count(*) from s_shop_postage_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <update id="updateByExample" parameterType="map">
    update s_shop_postage_config set 
	      shop_id = #{record.shopId,jdbcType=INTEGER},
	      logistics_id = #{record.logisticsId,jdbcType=INTEGER},
	      province_id = #{record.provinceId,jdbcType=INTEGER},
	      province_name = #{record.provinceName,jdbcType=VARCHAR},
	      city_id = #{record.cityId,jdbcType=INTEGER},
	      city_name = #{record.cityName,jdbcType=VARCHAR},
	      postage = #{record.postage,jdbcType=DOUBLE},
	      postage_free = #{record.postageFree,jdbcType=DOUBLE},
	      state = #{record.state,jdbcType=INTEGER},
	      create_time = #{record.createTime,jdbcType=TIMESTAMP},
	      create_user = #{record.createUser,jdbcType=VARCHAR},
	      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
	      update_user = #{record.updateUser,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateByExampleSelective" parameterType="map">
    update s_shop_postage_config 
    <set> 
	      <if test="record.shopId != null">
	        shop_id = #{record.shopId,jdbcType=INTEGER},
	      </if>
	      <if test="record.logisticsId != null">
	        logistics_id = #{record.logisticsId,jdbcType=INTEGER},
	      </if>
	      <if test="record.provinceId != null">
	        province_id = #{record.provinceId,jdbcType=INTEGER},
	      </if>
	      <if test="record.provinceName != null">
	        province_name = #{record.provinceName,jdbcType=VARCHAR},
	      </if>
	      <if test="record.cityId != null">
	        city_id = #{record.cityId,jdbcType=INTEGER},
	      </if>
	      <if test="record.cityName != null">
	        city_name = #{record.cityName,jdbcType=VARCHAR},
	      </if>
	      <if test="record.postage != null">
	        postage = #{record.postage,jdbcType=DOUBLE},
	      </if>
	      <if test="record.postageFree != null">
	        postage_free = #{record.postageFree,jdbcType=DOUBLE},
	      </if>
	      <if test="record.state != null">
	        state = #{record.state,jdbcType=INTEGER},
	      </if>
	      <if test="record.createTime != null">
	        create_time = #{record.createTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.createUser != null">
	        create_user = #{record.createUser,jdbcType=VARCHAR},
	      </if>
	      <if test="record.updateTime != null">
	        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.updateUser != null">
	        update_user = #{record.updateUser,jdbcType=VARCHAR},
	      </if>
	</set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateSelectiveByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.ShopPostageConfig">
    update s_shop_postage_config 
    <set> 
	      <if test="shopId != null">
	        shop_id = #{shopId,jdbcType=INTEGER},
	      </if>
	      <if test="logisticsId != null">
	        logistics_id = #{logisticsId,jdbcType=INTEGER},
	      </if>
	      <if test="provinceId != null">
	        province_id = #{provinceId,jdbcType=INTEGER},
	      </if>
	      <if test="provinceName != null">
	        province_name = #{provinceName,jdbcType=VARCHAR},
	      </if>
	      <if test="cityId != null">
	        city_id = #{cityId,jdbcType=INTEGER},
	      </if>
	      <if test="cityName != null">
	        city_name = #{cityName,jdbcType=VARCHAR},
	      </if>
	      <if test="postage != null">
	        postage = #{postage,jdbcType=DOUBLE},
	      </if>
	      <if test="postageFree != null">
	        postage_free = #{postageFree,jdbcType=DOUBLE},
	      </if>
	      <if test="state != null">
	        state = #{state,jdbcType=INTEGER},
	      </if>
	      <if test="createTime != null">
	        create_time = #{createTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="createUser != null">
	        create_user = #{createUser,jdbcType=VARCHAR},
	      </if>
	      <if test="updateTime != null">
	        update_time = #{updateTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="updateUser != null">
	        update_user = #{updateUser,jdbcType=VARCHAR},
	      </if>
	</set>
	where  id = #{id,jdbcType=INTEGER} 
  </update>
  
  <update id="updateByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.ShopPostageConfig">
    update s_shop_postage_config set
        shop_id = #{shopId,jdbcType=INTEGER},
        logistics_id = #{logisticsId,jdbcType=INTEGER},
        province_id = #{provinceId,jdbcType=INTEGER},
        province_name = #{provinceName,jdbcType=VARCHAR},
        city_id = #{cityId,jdbcType=INTEGER},
        city_name = #{cityName,jdbcType=VARCHAR},
        postage = #{postage,jdbcType=DOUBLE},
        postage_free = #{postageFree,jdbcType=DOUBLE},
        state = #{state,jdbcType=INTEGER},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        create_user = #{createUser,jdbcType=VARCHAR},
        update_time = #{updateTime,jdbcType=TIMESTAMP},
        update_user = #{updateUser,jdbcType=VARCHAR}
    where  id = #{id,jdbcType=INTEGER} 
  </update>
</mapper>