<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.xinmeng.api.dao.auto.ShopActivityConfigDao">
  <resultMap id="BaseResultMap" type="cn.xinmeng.api.entity.auto.ShopActivityConfig">
	    <id column="id" jdbcType="INTEGER" property="id" />
	   <result column="shop_id" jdbcType="INTEGER" property="shopId" />
	   <result column="can_random" jdbcType="INTEGER" property="canRandom" />
	   <result column="max_money" jdbcType="DOUBLE" property="maxMoney" />
	   <result column="min_money" jdbcType="DOUBLE" property="minMoney" />
	   <result column="can_full_reduce" jdbcType="INTEGER" property="canFullReduce" />
	   <result column="full_money" jdbcType="VARCHAR" property="fullMoney" />
	   <result column="reduce_money" jdbcType="VARCHAR" property="reduceMoney" />
	   <result column="can_sale" jdbcType="INTEGER" property="canSale" />
	   <result column="sale" jdbcType="DOUBLE" property="sale" />
	   <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
	   <result column="create_user" jdbcType="VARCHAR" property="createUser" />
	   <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	   <result column="update_user" jdbcType="VARCHAR" property="updateUser" />
   </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Base_Column_List">
    id,
    shop_id,
    can_random,
    max_money,
    min_money,
    can_full_reduce,
    full_money,
    reduce_money,
    can_sale,
    sale,
    create_time,
    create_user,
    update_time,
    update_user
  </sql>
  
  <select id="selectByPrimaryKey" parameterType="int" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> from m_shop_activity_config  where  id = #{id,jdbcType=INTEGER} 
  </select>
  
  <select id="selectByExample" parameterType="cn.xinmeng.api.entity.auto.example.ShopActivityConfigExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <choose>
	  	<when test="fieldList != null and fieldList != '' "> ${fieldList} </when>
	  	<otherwise> <include refid="Base_Column_List" /> </otherwise>
  	</choose>
    from  m_shop_activity_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
   <delete id="deleteByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.example.ShopActivityConfigExample">
     delete from  m_shop_activity_config where  id = #{id,jdbcType=INTEGER} 
   </delete>
  
  <delete id="deleteByExample" parameterType="cn.xinmeng.api.entity.auto.example.ShopActivityConfigExample">
    delete from  m_shop_activity_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  <insert id="insert" parameterType="cn.xinmeng.api.entity.auto.ShopActivityConfig" useGeneratedKeys="true" keyProperty="id">
    insert into m_shop_activity_config
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="shopId != null">
        shop_id,
      </if>
      <if test="canRandom != null">
        can_random,
      </if>
      <if test="maxMoney != null">
        max_money,
      </if>
      <if test="minMoney != null">
        min_money,
      </if>
      <if test="canFullReduce != null">
        can_full_reduce,
      </if>
      <if test="fullMoney != null">
        full_money,
      </if>
      <if test="reduceMoney != null">
        reduce_money,
      </if>
      <if test="canSale != null">
        can_sale,
      </if>
      <if test="sale != null">
        sale,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
    </trim>
    
    <trim prefix="values (" suffix=")" suffixOverrides=",">
    
      <if test="id != null">
        #{ id,jdbcType=INTEGER },
      </if>
      <if test="shopId != null">
        #{ shopId,jdbcType=INTEGER },
      </if>
      <if test="canRandom != null">
        #{ canRandom,jdbcType=INTEGER },
      </if>
      <if test="maxMoney != null">
        #{ maxMoney,jdbcType=DOUBLE },
      </if>
      <if test="minMoney != null">
        #{ minMoney,jdbcType=DOUBLE },
      </if>
      <if test="canFullReduce != null">
        #{ canFullReduce,jdbcType=INTEGER },
      </if>
      <if test="fullMoney != null">
        #{ fullMoney,jdbcType=VARCHAR },
      </if>
      <if test="reduceMoney != null">
        #{ reduceMoney,jdbcType=VARCHAR },
      </if>
      <if test="canSale != null">
        #{ canSale,jdbcType=INTEGER },
      </if>
      <if test="sale != null">
        #{ sale,jdbcType=DOUBLE },
      </if>
      <if test="createTime != null">
        #{ createTime,jdbcType=TIMESTAMP },
      </if>
      <if test="createUser != null">
        #{ createUser,jdbcType=VARCHAR },
      </if>
      <if test="updateTime != null">
        #{ updateTime,jdbcType=TIMESTAMP },
      </if>
      <if test="updateUser != null">
        #{ updateUser,jdbcType=VARCHAR },
      </if>
    </trim>
  </insert>
  
  <insert id="insertBatch" parameterType="java.util.List">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">  
        SELECT LAST_INSERT_ID() as id
    </selectKey>
    insert into m_shop_activity_config 
    (
      shop_id,
      can_random,
      max_money,
      min_money,
      can_full_reduce,
      full_money,
      reduce_money,
      can_sale,
      sale,
      create_time,
      create_user,
      update_time,
      update_user
    )
    values
    <foreach collection="list" item="item" index="index" separator="," >  
    (
     #{ item.shopId,jdbcType=INTEGER },
     #{ item.canRandom,jdbcType=INTEGER },
     #{ item.maxMoney,jdbcType=DOUBLE },
     #{ item.minMoney,jdbcType=DOUBLE },
     #{ item.canFullReduce,jdbcType=INTEGER },
     #{ item.fullMoney,jdbcType=VARCHAR },
     #{ item.reduceMoney,jdbcType=VARCHAR },
     #{ item.canSale,jdbcType=INTEGER },
     #{ item.sale,jdbcType=DOUBLE },
     #{ item.createTime,jdbcType=TIMESTAMP },
     #{ item.createUser,jdbcType=VARCHAR },
     #{ item.updateTime,jdbcType=TIMESTAMP },
     #{ item.updateUser,jdbcType=VARCHAR }
    )  
    </foreach>  
  </insert>
  
  <select id="countByExample" parameterType="cn.xinmeng.api.entity.auto.example.ShopActivityConfigExample" resultType="java.lang.Integer">
    select count(*) from m_shop_activity_config
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <update id="updateByExample" parameterType="map">
    update m_shop_activity_config set 
	      shop_id = #{record.shopId,jdbcType=INTEGER},
	      can_random = #{record.canRandom,jdbcType=INTEGER},
	      max_money = #{record.maxMoney,jdbcType=DOUBLE},
	      min_money = #{record.minMoney,jdbcType=DOUBLE},
	      can_full_reduce = #{record.canFullReduce,jdbcType=INTEGER},
	      full_money = #{record.fullMoney,jdbcType=VARCHAR},
	      reduce_money = #{record.reduceMoney,jdbcType=VARCHAR},
	      can_sale = #{record.canSale,jdbcType=INTEGER},
	      sale = #{record.sale,jdbcType=DOUBLE},
	      create_time = #{record.createTime,jdbcType=TIMESTAMP},
	      create_user = #{record.createUser,jdbcType=VARCHAR},
	      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
	      update_user = #{record.updateUser,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateByExampleSelective" parameterType="map">
    update m_shop_activity_config 
    <set> 
	      <if test="record.shopId != null">
	        shop_id = #{record.shopId,jdbcType=INTEGER},
	      </if>
	      <if test="record.canRandom != null">
	        can_random = #{record.canRandom,jdbcType=INTEGER},
	      </if>
	      <if test="record.maxMoney != null">
	        max_money = #{record.maxMoney,jdbcType=DOUBLE},
	      </if>
	      <if test="record.minMoney != null">
	        min_money = #{record.minMoney,jdbcType=DOUBLE},
	      </if>
	      <if test="record.canFullReduce != null">
	        can_full_reduce = #{record.canFullReduce,jdbcType=INTEGER},
	      </if>
	      <if test="record.fullMoney != null">
	        full_money = #{record.fullMoney,jdbcType=VARCHAR},
	      </if>
	      <if test="record.reduceMoney != null">
	        reduce_money = #{record.reduceMoney,jdbcType=VARCHAR},
	      </if>
	      <if test="record.canSale != null">
	        can_sale = #{record.canSale,jdbcType=INTEGER},
	      </if>
	      <if test="record.sale != null">
	        sale = #{record.sale,jdbcType=DOUBLE},
	      </if>
	      <if test="record.createTime != null">
	        create_time = #{record.createTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.createUser != null">
	        create_user = #{record.createUser,jdbcType=VARCHAR},
	      </if>
	      <if test="record.updateTime != null">
	        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.updateUser != null">
	        update_user = #{record.updateUser,jdbcType=VARCHAR},
	      </if>
	</set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateSelectiveByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.ShopActivityConfig">
    update m_shop_activity_config 
    <set> 
	      <if test="shopId != null">
	        shop_id = #{shopId,jdbcType=INTEGER},
	      </if>
	      <if test="canRandom != null">
	        can_random = #{canRandom,jdbcType=INTEGER},
	      </if>
	      <if test="maxMoney != null">
	        max_money = #{maxMoney,jdbcType=DOUBLE},
	      </if>
	      <if test="minMoney != null">
	        min_money = #{minMoney,jdbcType=DOUBLE},
	      </if>
	      <if test="canFullReduce != null">
	        can_full_reduce = #{canFullReduce,jdbcType=INTEGER},
	      </if>
	      <if test="fullMoney != null">
	        full_money = #{fullMoney,jdbcType=VARCHAR},
	      </if>
	      <if test="reduceMoney != null">
	        reduce_money = #{reduceMoney,jdbcType=VARCHAR},
	      </if>
	      <if test="canSale != null">
	        can_sale = #{canSale,jdbcType=INTEGER},
	      </if>
	      <if test="sale != null">
	        sale = #{sale,jdbcType=DOUBLE},
	      </if>
	      <if test="createTime != null">
	        create_time = #{createTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="createUser != null">
	        create_user = #{createUser,jdbcType=VARCHAR},
	      </if>
	      <if test="updateTime != null">
	        update_time = #{updateTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="updateUser != null">
	        update_user = #{updateUser,jdbcType=VARCHAR},
	      </if>
	</set>
	where  id = #{id,jdbcType=INTEGER} 
  </update>
  
  <update id="updateByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.ShopActivityConfig">
    update m_shop_activity_config set
        shop_id = #{shopId,jdbcType=INTEGER},
        can_random = #{canRandom,jdbcType=INTEGER},
        max_money = #{maxMoney,jdbcType=DOUBLE},
        min_money = #{minMoney,jdbcType=DOUBLE},
        can_full_reduce = #{canFullReduce,jdbcType=INTEGER},
        full_money = #{fullMoney,jdbcType=VARCHAR},
        reduce_money = #{reduceMoney,jdbcType=VARCHAR},
        can_sale = #{canSale,jdbcType=INTEGER},
        sale = #{sale,jdbcType=DOUBLE},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        create_user = #{createUser,jdbcType=VARCHAR},
        update_time = #{updateTime,jdbcType=TIMESTAMP},
        update_user = #{updateUser,jdbcType=VARCHAR}
    where  id = #{id,jdbcType=INTEGER} 
  </update>
</mapper>