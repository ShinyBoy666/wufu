<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.xinmeng.api.dao.auto.ProductCommentReplyDao">
  <resultMap id="BaseResultMap" type="cn.xinmeng.api.entity.auto.ProductCommentReply">
	    <id column="id" jdbcType="INTEGER" property="id" />
	   <result column="commont_id" jdbcType="INTEGER" property="commontId" />
	   <result column="reply_id" jdbcType="INTEGER" property="replyId" />
	   <result column="reply_type" jdbcType="INTEGER" property="replyType" />
	   <result column="reply_content" jdbcType="VARCHAR" property="replyContent" />
	   <result column="reply_user" jdbcType="VARCHAR" property="replyUser" />
	   <result column="reply_time" jdbcType="TIMESTAMP" property="replyTime" />
	   <result column="state" jdbcType="INTEGER" property="state" />
   </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Base_Column_List">
    id,
    commont_id,
    reply_id,
    reply_type,
    reply_content,
    reply_user,
    reply_time,
    state
  </sql>
  
  <select id="selectByPrimaryKey" parameterType="int" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> from p_product_comment_reply  where  id = #{id,jdbcType=INTEGER} 
  </select>
  
  <select id="selectByExample" parameterType="cn.xinmeng.api.entity.auto.example.ProductCommentReplyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <choose>
	  	<when test="fieldList != null and fieldList != '' "> ${fieldList} </when>
	  	<otherwise> <include refid="Base_Column_List" /> </otherwise>
  	</choose>
    from  p_product_comment_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
   <delete id="deleteByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.example.ProductCommentReplyExample">
     delete from  p_product_comment_reply where  id = #{id,jdbcType=INTEGER} 
   </delete>
  
  <delete id="deleteByExample" parameterType="cn.xinmeng.api.entity.auto.example.ProductCommentReplyExample">
    delete from  p_product_comment_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  <insert id="insert" parameterType="cn.xinmeng.api.entity.auto.ProductCommentReply" useGeneratedKeys="true" keyProperty="id">
    insert into p_product_comment_reply
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="commontId != null">
        commont_id,
      </if>
      <if test="replyId != null">
        reply_id,
      </if>
      <if test="replyType != null">
        reply_type,
      </if>
      <if test="replyContent != null">
        reply_content,
      </if>
      <if test="replyUser != null">
        reply_user,
      </if>
      <if test="replyTime != null">
        reply_time,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    
    <trim prefix="values (" suffix=")" suffixOverrides=",">
    
      <if test="id != null">
        #{ id,jdbcType=INTEGER },
      </if>
      <if test="commontId != null">
        #{ commontId,jdbcType=INTEGER },
      </if>
      <if test="replyId != null">
        #{ replyId,jdbcType=INTEGER },
      </if>
      <if test="replyType != null">
        #{ replyType,jdbcType=INTEGER },
      </if>
      <if test="replyContent != null">
        #{ replyContent,jdbcType=VARCHAR },
      </if>
      <if test="replyUser != null">
        #{ replyUser,jdbcType=VARCHAR },
      </if>
      <if test="replyTime != null">
        #{ replyTime,jdbcType=TIMESTAMP },
      </if>
      <if test="state != null">
        #{ state,jdbcType=INTEGER },
      </if>
    </trim>
  </insert>
  
  <insert id="insertBatch" parameterType="java.util.List">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">  
        SELECT LAST_INSERT_ID() as id
    </selectKey>
    insert into p_product_comment_reply 
    (
      commont_id,
      reply_id,
      reply_type,
      reply_content,
      reply_user,
      reply_time,
      state
    )
    values
    <foreach collection="list" item="item" index="index" separator="," >  
    (
     #{ item.commontId,jdbcType=INTEGER },
     #{ item.replyId,jdbcType=INTEGER },
     #{ item.replyType,jdbcType=INTEGER },
     #{ item.replyContent,jdbcType=VARCHAR },
     #{ item.replyUser,jdbcType=VARCHAR },
     #{ item.replyTime,jdbcType=TIMESTAMP },
     #{ item.state,jdbcType=INTEGER }
    )  
    </foreach>  
  </insert>
  
  <select id="countByExample" parameterType="cn.xinmeng.api.entity.auto.example.ProductCommentReplyExample" resultType="java.lang.Integer">
    select count(*) from p_product_comment_reply
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <update id="updateByExample" parameterType="map">
    update p_product_comment_reply set 
	      commont_id = #{record.commontId,jdbcType=INTEGER},
	      reply_id = #{record.replyId,jdbcType=INTEGER},
	      reply_type = #{record.replyType,jdbcType=INTEGER},
	      reply_content = #{record.replyContent,jdbcType=VARCHAR},
	      reply_user = #{record.replyUser,jdbcType=VARCHAR},
	      reply_time = #{record.replyTime,jdbcType=TIMESTAMP},
	      state = #{record.state,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateByExampleSelective" parameterType="map">
    update p_product_comment_reply 
    <set> 
	      <if test="record.commontId != null">
	        commont_id = #{record.commontId,jdbcType=INTEGER},
	      </if>
	      <if test="record.replyId != null">
	        reply_id = #{record.replyId,jdbcType=INTEGER},
	      </if>
	      <if test="record.replyType != null">
	        reply_type = #{record.replyType,jdbcType=INTEGER},
	      </if>
	      <if test="record.replyContent != null">
	        reply_content = #{record.replyContent,jdbcType=VARCHAR},
	      </if>
	      <if test="record.replyUser != null">
	        reply_user = #{record.replyUser,jdbcType=VARCHAR},
	      </if>
	      <if test="record.replyTime != null">
	        reply_time = #{record.replyTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.state != null">
	        state = #{record.state,jdbcType=INTEGER},
	      </if>
	</set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateSelectiveByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.ProductCommentReply">
    update p_product_comment_reply 
    <set> 
	      <if test="commontId != null">
	        commont_id = #{commontId,jdbcType=INTEGER},
	      </if>
	      <if test="replyId != null">
	        reply_id = #{replyId,jdbcType=INTEGER},
	      </if>
	      <if test="replyType != null">
	        reply_type = #{replyType,jdbcType=INTEGER},
	      </if>
	      <if test="replyContent != null">
	        reply_content = #{replyContent,jdbcType=VARCHAR},
	      </if>
	      <if test="replyUser != null">
	        reply_user = #{replyUser,jdbcType=VARCHAR},
	      </if>
	      <if test="replyTime != null">
	        reply_time = #{replyTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="state != null">
	        state = #{state,jdbcType=INTEGER},
	      </if>
	</set>
	where  id = #{id,jdbcType=INTEGER} 
  </update>
  
  <update id="updateByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.ProductCommentReply">
    update p_product_comment_reply set
        commont_id = #{commontId,jdbcType=INTEGER},
        reply_id = #{replyId,jdbcType=INTEGER},
        reply_type = #{replyType,jdbcType=INTEGER},
        reply_content = #{replyContent,jdbcType=VARCHAR},
        reply_user = #{replyUser,jdbcType=VARCHAR},
        reply_time = #{replyTime,jdbcType=TIMESTAMP},
        state = #{state,jdbcType=INTEGER}
    where  id = #{id,jdbcType=INTEGER} 
  </update>
</mapper>