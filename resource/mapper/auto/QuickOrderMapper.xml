<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.xinmeng.api.dao.auto.QuickOrderDao">
  <resultMap id="BaseResultMap" type="cn.xinmeng.api.entity.auto.QuickOrder">
	    <id column="id" jdbcType="INTEGER" property="id" />
	   <result column="order_id" jdbcType="VARCHAR" property="orderId" />
	   <result column="shop_id" jdbcType="INTEGER" property="shopId" />
	   <result column="open_id" jdbcType="VARCHAR" property="openId" />
	   <result column="order_type" jdbcType="INTEGER" property="orderType" />
	   <result column="coupon_code" jdbcType="VARCHAR" property="couponCode" />
	   <result column="total_amount" jdbcType="DOUBLE" property="totalAmount" />
	   <result column="discount_amount" jdbcType="DOUBLE" property="discountAmount" />
	   <result column="pay_amount" jdbcType="DOUBLE" property="payAmount" />
	   <result column="pay_type" jdbcType="INTEGER" property="payType" />
	   <result column="receive_coupon_amount" jdbcType="DOUBLE" property="receiveCouponAmount" />
	   <result column="remark" jdbcType="VARCHAR" property="remark" />
	   <result column="order_from" jdbcType="INTEGER" property="orderFrom" />
	   <result column="pay_state" jdbcType="INTEGER" property="payState" />
	   <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
	   <result column="create_user" jdbcType="VARCHAR" property="createUser" />
	   <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	   <result column="update_user" jdbcType="VARCHAR" property="updateUser" />
   </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Base_Column_List">
    id,
    order_id,
    shop_id,
    open_id,
    order_type,
    coupon_code,
    total_amount,
    discount_amount,
    pay_amount,
    pay_type,
    receive_coupon_amount,
    remark,
    order_from,
    pay_state,
    create_time,
    create_user,
    update_time,
    update_user
  </sql>
  
  <select id="selectByPrimaryKey" parameterType="int" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> from o_quick_order  where  id = #{id,jdbcType=INTEGER} 
  </select>
  
  <select id="selectByExample" parameterType="cn.xinmeng.api.entity.auto.example.QuickOrderExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <choose>
	  	<when test="fieldList != null and fieldList != '' "> ${fieldList} </when>
	  	<otherwise> <include refid="Base_Column_List" /> </otherwise>
  	</choose>
    from  o_quick_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
   <delete id="deleteByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.example.QuickOrderExample">
     delete from  o_quick_order where  id = #{id,jdbcType=INTEGER} 
   </delete>
  
  <delete id="deleteByExample" parameterType="cn.xinmeng.api.entity.auto.example.QuickOrderExample">
    delete from  o_quick_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  <insert id="insert" parameterType="cn.xinmeng.api.entity.auto.QuickOrder" useGeneratedKeys="true" keyProperty="id">
    insert into o_quick_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="orderId != null">
        order_id,
      </if>
      <if test="shopId != null">
        shop_id,
      </if>
      <if test="openId != null">
        open_id,
      </if>
      <if test="orderType != null">
        order_type,
      </if>
      <if test="couponCode != null">
        coupon_code,
      </if>
      <if test="totalAmount != null">
        total_amount,
      </if>
      <if test="discountAmount != null">
        discount_amount,
      </if>
      <if test="payAmount != null">
        pay_amount,
      </if>
      <if test="payType != null">
        pay_type,
      </if>
      <if test="receiveCouponAmount != null">
        receive_coupon_amount,
      </if>
      <if test="remark != null">
        remark,
      </if>
      <if test="orderFrom != null">
        order_from,
      </if>
      <if test="payState != null">
        pay_state,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
    </trim>
    
    <trim prefix="values (" suffix=")" suffixOverrides=",">
    
      <if test="id != null">
        #{ id,jdbcType=INTEGER },
      </if>
      <if test="orderId != null">
        #{ orderId,jdbcType=VARCHAR },
      </if>
      <if test="shopId != null">
        #{ shopId,jdbcType=INTEGER },
      </if>
      <if test="openId != null">
        #{ openId,jdbcType=VARCHAR },
      </if>
      <if test="orderType != null">
        #{ orderType,jdbcType=INTEGER },
      </if>
      <if test="couponCode != null">
        #{ couponCode,jdbcType=VARCHAR },
      </if>
      <if test="totalAmount != null">
        #{ totalAmount,jdbcType=DOUBLE },
      </if>
      <if test="discountAmount != null">
        #{ discountAmount,jdbcType=DOUBLE },
      </if>
      <if test="payAmount != null">
        #{ payAmount,jdbcType=DOUBLE },
      </if>
      <if test="payType != null">
        #{ payType,jdbcType=INTEGER },
      </if>
      <if test="receiveCouponAmount != null">
        #{ receiveCouponAmount,jdbcType=DOUBLE },
      </if>
      <if test="remark != null">
        #{ remark,jdbcType=VARCHAR },
      </if>
      <if test="orderFrom != null">
        #{ orderFrom,jdbcType=INTEGER },
      </if>
      <if test="payState != null">
        #{ payState,jdbcType=INTEGER },
      </if>
      <if test="createTime != null">
        #{ createTime,jdbcType=TIMESTAMP },
      </if>
      <if test="createUser != null">
        #{ createUser,jdbcType=VARCHAR },
      </if>
      <if test="updateTime != null">
        #{ updateTime,jdbcType=TIMESTAMP },
      </if>
      <if test="updateUser != null">
        #{ updateUser,jdbcType=VARCHAR },
      </if>
    </trim>
  </insert>
  
  <insert id="insertBatch" parameterType="java.util.List">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">  
        SELECT LAST_INSERT_ID() as id
    </selectKey>
    insert into o_quick_order 
    (
      order_id,
      shop_id,
      open_id,
      order_type,
      coupon_code,
      total_amount,
      discount_amount,
      pay_amount,
      pay_type,
      receive_coupon_amount,
      remark,
      order_from,
      pay_state,
      create_time,
      create_user,
      update_time,
      update_user
    )
    values
    <foreach collection="list" item="item" index="index" separator="," >  
    (
     #{ item.orderId,jdbcType=VARCHAR },
     #{ item.shopId,jdbcType=INTEGER },
     #{ item.openId,jdbcType=VARCHAR },
     #{ item.orderType,jdbcType=INTEGER },
     #{ item.couponCode,jdbcType=VARCHAR },
     #{ item.totalAmount,jdbcType=DOUBLE },
     #{ item.discountAmount,jdbcType=DOUBLE },
     #{ item.payAmount,jdbcType=DOUBLE },
     #{ item.payType,jdbcType=INTEGER },
     #{ item.receiveCouponAmount,jdbcType=DOUBLE },
     #{ item.remark,jdbcType=VARCHAR },
     #{ item.orderFrom,jdbcType=INTEGER },
     #{ item.payState,jdbcType=INTEGER },
     #{ item.createTime,jdbcType=TIMESTAMP },
     #{ item.createUser,jdbcType=VARCHAR },
     #{ item.updateTime,jdbcType=TIMESTAMP },
     #{ item.updateUser,jdbcType=VARCHAR }
    )  
    </foreach>  
  </insert>
  
  <select id="countByExample" parameterType="cn.xinmeng.api.entity.auto.example.QuickOrderExample" resultType="java.lang.Integer">
    select count(*) from o_quick_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <update id="updateByExample" parameterType="map">
    update o_quick_order set 
	      order_id = #{record.orderId,jdbcType=VARCHAR},
	      shop_id = #{record.shopId,jdbcType=INTEGER},
	      open_id = #{record.openId,jdbcType=VARCHAR},
	      order_type = #{record.orderType,jdbcType=INTEGER},
	      coupon_code = #{record.couponCode,jdbcType=VARCHAR},
	      total_amount = #{record.totalAmount,jdbcType=DOUBLE},
	      discount_amount = #{record.discountAmount,jdbcType=DOUBLE},
	      pay_amount = #{record.payAmount,jdbcType=DOUBLE},
	      pay_type = #{record.payType,jdbcType=INTEGER},
	      receive_coupon_amount = #{record.receiveCouponAmount,jdbcType=DOUBLE},
	      remark = #{record.remark,jdbcType=VARCHAR},
	      order_from = #{record.orderFrom,jdbcType=INTEGER},
	      pay_state = #{record.payState,jdbcType=INTEGER},
	      create_time = #{record.createTime,jdbcType=TIMESTAMP},
	      create_user = #{record.createUser,jdbcType=VARCHAR},
	      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
	      update_user = #{record.updateUser,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateByExampleSelective" parameterType="map">
    update o_quick_order 
    <set> 
	      <if test="record.orderId != null">
	        order_id = #{record.orderId,jdbcType=VARCHAR},
	      </if>
	      <if test="record.shopId != null">
	        shop_id = #{record.shopId,jdbcType=INTEGER},
	      </if>
	      <if test="record.openId != null">
	        open_id = #{record.openId,jdbcType=VARCHAR},
	      </if>
	      <if test="record.orderType != null">
	        order_type = #{record.orderType,jdbcType=INTEGER},
	      </if>
	      <if test="record.couponCode != null">
	        coupon_code = #{record.couponCode,jdbcType=VARCHAR},
	      </if>
	      <if test="record.totalAmount != null">
	        total_amount = #{record.totalAmount,jdbcType=DOUBLE},
	      </if>
	      <if test="record.discountAmount != null">
	        discount_amount = #{record.discountAmount,jdbcType=DOUBLE},
	      </if>
	      <if test="record.payAmount != null">
	        pay_amount = #{record.payAmount,jdbcType=DOUBLE},
	      </if>
	      <if test="record.payType != null">
	        pay_type = #{record.payType,jdbcType=INTEGER},
	      </if>
	      <if test="record.receiveCouponAmount != null">
	        receive_coupon_amount = #{record.receiveCouponAmount,jdbcType=DOUBLE},
	      </if>
	      <if test="record.remark != null">
	        remark = #{record.remark,jdbcType=VARCHAR},
	      </if>
	      <if test="record.orderFrom != null">
	        order_from = #{record.orderFrom,jdbcType=INTEGER},
	      </if>
	      <if test="record.payState != null">
	        pay_state = #{record.payState,jdbcType=INTEGER},
	      </if>
	      <if test="record.createTime != null">
	        create_time = #{record.createTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.createUser != null">
	        create_user = #{record.createUser,jdbcType=VARCHAR},
	      </if>
	      <if test="record.updateTime != null">
	        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.updateUser != null">
	        update_user = #{record.updateUser,jdbcType=VARCHAR},
	      </if>
	</set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateSelectiveByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.QuickOrder">
    update o_quick_order 
    <set> 
	      <if test="orderId != null">
	        order_id = #{orderId,jdbcType=VARCHAR},
	      </if>
	      <if test="shopId != null">
	        shop_id = #{shopId,jdbcType=INTEGER},
	      </if>
	      <if test="openId != null">
	        open_id = #{openId,jdbcType=VARCHAR},
	      </if>
	      <if test="orderType != null">
	        order_type = #{orderType,jdbcType=INTEGER},
	      </if>
	      <if test="couponCode != null">
	        coupon_code = #{couponCode,jdbcType=VARCHAR},
	      </if>
	      <if test="totalAmount != null">
	        total_amount = #{totalAmount,jdbcType=DOUBLE},
	      </if>
	      <if test="discountAmount != null">
	        discount_amount = #{discountAmount,jdbcType=DOUBLE},
	      </if>
	      <if test="payAmount != null">
	        pay_amount = #{payAmount,jdbcType=DOUBLE},
	      </if>
	      <if test="payType != null">
	        pay_type = #{payType,jdbcType=INTEGER},
	      </if>
	      <if test="receiveCouponAmount != null">
	        receive_coupon_amount = #{receiveCouponAmount,jdbcType=DOUBLE},
	      </if>
	      <if test="remark != null">
	        remark = #{remark,jdbcType=VARCHAR},
	      </if>
	      <if test="orderFrom != null">
	        order_from = #{orderFrom,jdbcType=INTEGER},
	      </if>
	      <if test="payState != null">
	        pay_state = #{payState,jdbcType=INTEGER},
	      </if>
	      <if test="createTime != null">
	        create_time = #{createTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="createUser != null">
	        create_user = #{createUser,jdbcType=VARCHAR},
	      </if>
	      <if test="updateTime != null">
	        update_time = #{updateTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="updateUser != null">
	        update_user = #{updateUser,jdbcType=VARCHAR},
	      </if>
	</set>
	where  id = #{id,jdbcType=INTEGER} 
  </update>
  
  <update id="updateByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.QuickOrder">
    update o_quick_order set
        order_id = #{orderId,jdbcType=VARCHAR},
        shop_id = #{shopId,jdbcType=INTEGER},
        open_id = #{openId,jdbcType=VARCHAR},
        order_type = #{orderType,jdbcType=INTEGER},
        coupon_code = #{couponCode,jdbcType=VARCHAR},
        total_amount = #{totalAmount,jdbcType=DOUBLE},
        discount_amount = #{discountAmount,jdbcType=DOUBLE},
        pay_amount = #{payAmount,jdbcType=DOUBLE},
        pay_type = #{payType,jdbcType=INTEGER},
        receive_coupon_amount = #{receiveCouponAmount,jdbcType=DOUBLE},
        remark = #{remark,jdbcType=VARCHAR},
        order_from = #{orderFrom,jdbcType=INTEGER},
        pay_state = #{payState,jdbcType=INTEGER},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        create_user = #{createUser,jdbcType=VARCHAR},
        update_time = #{updateTime,jdbcType=TIMESTAMP},
        update_user = #{updateUser,jdbcType=VARCHAR}
    where  id = #{id,jdbcType=INTEGER} 
  </update>
</mapper>