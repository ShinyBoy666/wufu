<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.xinmeng.api.dao.auto.ProductPriceDao">
  <resultMap id="BaseResultMap" type="cn.xinmeng.api.entity.auto.ProductPrice">
	    <id column="id" jdbcType="INTEGER" property="id" />
	   <result column="shop_id" jdbcType="INTEGER" property="shopId" />
	   <result column="product_id" jdbcType="INTEGER" property="productId" />
	   <result column="weight" jdbcType="DOUBLE" property="weight" />
	   <result column="sku" jdbcType="VARCHAR" property="sku" />
	   <result column="bar_code" jdbcType="VARCHAR" property="barCode" />
	   <result column="market_price" jdbcType="DOUBLE" property="marketPrice" />
	   <result column="retail_price" jdbcType="DOUBLE" property="retailPrice" />
	   <result column="profit_first" jdbcType="DOUBLE" property="profitFirst" />
	   <result column="purchase_price" jdbcType="DOUBLE" property="purchasePrice" />
	   <result column="profit_second" jdbcType="DOUBLE" property="profitSecond" />
	   <result column="profit_third" jdbcType="DOUBLE" property="profitThird" />
	   <result column="score" jdbcType="INTEGER" property="score" />
	   <result column="quantity" jdbcType="INTEGER" property="quantity" />
	   <result column="state" jdbcType="INTEGER" property="state" />
	   <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
	   <result column="create_user" jdbcType="VARCHAR" property="createUser" />
	   <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	   <result column="update_user" jdbcType="VARCHAR" property="updateUser" />
   </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Base_Column_List">
    id,
    shop_id,
    product_id,
    weight,
    sku,
    bar_code,
    market_price,
    retail_price,
    profit_first,
    purchase_price,
    profit_second,
    profit_third,
    score,
    quantity,
    state,
    create_time,
    create_user,
    update_time,
    update_user
  </sql>
  
  <select id="selectByPrimaryKey" parameterType="int" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> from p_product_price  where  id = #{id,jdbcType=INTEGER} 
  </select>
  
  <select id="selectByExample" parameterType="cn.xinmeng.api.entity.auto.example.ProductPriceExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <choose>
	  	<when test="fieldList != null and fieldList != '' "> ${fieldList} </when>
	  	<otherwise> <include refid="Base_Column_List" /> </otherwise>
  	</choose>
    from  p_product_price
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
   <delete id="deleteByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.example.ProductPriceExample">
     delete from  p_product_price where  id = #{id,jdbcType=INTEGER} 
   </delete>
  
  <delete id="deleteByExample" parameterType="cn.xinmeng.api.entity.auto.example.ProductPriceExample">
    delete from  p_product_price
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  <insert id="insert" parameterType="cn.xinmeng.api.entity.auto.ProductPrice" useGeneratedKeys="true" keyProperty="id">
    insert into p_product_price
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="shopId != null">
        shop_id,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="weight != null">
        weight,
      </if>
      <if test="sku != null">
        sku,
      </if>
      <if test="barCode != null">
        bar_code,
      </if>
      <if test="marketPrice != null">
        market_price,
      </if>
      <if test="retailPrice != null">
        retail_price,
      </if>
      <if test="profitFirst != null">
        profit_first,
      </if>
      <if test="purchasePrice != null">
        purchase_price,
      </if>
      <if test="profitSecond != null">
        profit_second,
      </if>
      <if test="profitThird != null">
        profit_third,
      </if>
      <if test="score != null">
        score,
      </if>
      <if test="quantity != null">
        quantity,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
    </trim>
    
    <trim prefix="values (" suffix=")" suffixOverrides=",">
    
      <if test="id != null">
        #{ id,jdbcType=INTEGER },
      </if>
      <if test="shopId != null">
        #{ shopId,jdbcType=INTEGER },
      </if>
      <if test="productId != null">
        #{ productId,jdbcType=INTEGER },
      </if>
      <if test="weight != null">
        #{ weight,jdbcType=DOUBLE },
      </if>
      <if test="sku != null">
        #{ sku,jdbcType=VARCHAR },
      </if>
      <if test="barCode != null">
        #{ barCode,jdbcType=VARCHAR },
      </if>
      <if test="marketPrice != null">
        #{ marketPrice,jdbcType=DOUBLE },
      </if>
      <if test="retailPrice != null">
        #{ retailPrice,jdbcType=DOUBLE },
      </if>
      <if test="profitFirst != null">
        #{ profitFirst,jdbcType=DOUBLE },
      </if>
      <if test="purchasePrice != null">
        #{ purchasePrice,jdbcType=DOUBLE },
      </if>
      <if test="profitSecond != null">
        #{ profitSecond,jdbcType=DOUBLE },
      </if>
      <if test="profitThird != null">
        #{ profitThird,jdbcType=DOUBLE },
      </if>
      <if test="score != null">
        #{ score,jdbcType=INTEGER },
      </if>
      <if test="quantity != null">
        #{ quantity,jdbcType=INTEGER },
      </if>
      <if test="state != null">
        #{ state,jdbcType=INTEGER },
      </if>
      <if test="createTime != null">
        #{ createTime,jdbcType=TIMESTAMP },
      </if>
      <if test="createUser != null">
        #{ createUser,jdbcType=VARCHAR },
      </if>
      <if test="updateTime != null">
        #{ updateTime,jdbcType=TIMESTAMP },
      </if>
      <if test="updateUser != null">
        #{ updateUser,jdbcType=VARCHAR },
      </if>
    </trim>
  </insert>
  
  <insert id="insertBatch" parameterType="java.util.List">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">  
        SELECT LAST_INSERT_ID() as id
    </selectKey>
    insert into p_product_price 
    (
      shop_id,
      product_id,
      weight,
      sku,
      bar_code,
      market_price,
      retail_price,
      profit_first,
      purchase_price,
      profit_second,
      profit_third,
      score,
      quantity,
      state,
      create_time,
      create_user,
      update_time,
      update_user
    )
    values
    <foreach collection="list" item="item" index="index" separator="," >  
    (
     #{ item.shopId,jdbcType=INTEGER },
     #{ item.productId,jdbcType=INTEGER },
     #{ item.weight,jdbcType=DOUBLE },
     #{ item.sku,jdbcType=VARCHAR },
     #{ item.barCode,jdbcType=VARCHAR },
     #{ item.marketPrice,jdbcType=DOUBLE },
     #{ item.retailPrice,jdbcType=DOUBLE },
     #{ item.profitFirst,jdbcType=DOUBLE },
     #{ item.purchasePrice,jdbcType=DOUBLE },
     #{ item.profitSecond,jdbcType=DOUBLE },
     #{ item.profitThird,jdbcType=DOUBLE },
     #{ item.score,jdbcType=INTEGER },
     #{ item.quantity,jdbcType=INTEGER },
     #{ item.state,jdbcType=INTEGER },
     #{ item.createTime,jdbcType=TIMESTAMP },
     #{ item.createUser,jdbcType=VARCHAR },
     #{ item.updateTime,jdbcType=TIMESTAMP },
     #{ item.updateUser,jdbcType=VARCHAR }
    )  
    </foreach>  
  </insert>
  
  <select id="countByExample" parameterType="cn.xinmeng.api.entity.auto.example.ProductPriceExample" resultType="java.lang.Integer">
    select count(*) from p_product_price
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <update id="updateByExample" parameterType="map">
    update p_product_price set 
	      shop_id = #{record.shopId,jdbcType=INTEGER},
	      product_id = #{record.productId,jdbcType=INTEGER},
	      weight = #{record.weight,jdbcType=DOUBLE},
	      sku = #{record.sku,jdbcType=VARCHAR},
	      bar_code = #{record.barCode,jdbcType=VARCHAR},
	      market_price = #{record.marketPrice,jdbcType=DOUBLE},
	      retail_price = #{record.retailPrice,jdbcType=DOUBLE},
	      profit_first = #{record.profitFirst,jdbcType=DOUBLE},
	      purchase_price = #{record.purchasePrice,jdbcType=DOUBLE},
	      profit_second = #{record.profitSecond,jdbcType=DOUBLE},
	      profit_third = #{record.profitThird,jdbcType=DOUBLE},
	      score = #{record.score,jdbcType=INTEGER},
	      quantity = #{record.quantity,jdbcType=INTEGER},
	      state = #{record.state,jdbcType=INTEGER},
	      create_time = #{record.createTime,jdbcType=TIMESTAMP},
	      create_user = #{record.createUser,jdbcType=VARCHAR},
	      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
	      update_user = #{record.updateUser,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateByExampleSelective" parameterType="map">
    update p_product_price 
    <set> 
	      <if test="record.shopId != null">
	        shop_id = #{record.shopId,jdbcType=INTEGER},
	      </if>
	      <if test="record.productId != null">
	        product_id = #{record.productId,jdbcType=INTEGER},
	      </if>
	      <if test="record.weight != null">
	        weight = #{record.weight,jdbcType=DOUBLE},
	      </if>
	      <if test="record.sku != null">
	        sku = #{record.sku,jdbcType=VARCHAR},
	      </if>
	      <if test="record.barCode != null">
	        bar_code = #{record.barCode,jdbcType=VARCHAR},
	      </if>
	      <if test="record.marketPrice != null">
	        market_price = #{record.marketPrice,jdbcType=DOUBLE},
	      </if>
	      <if test="record.retailPrice != null">
	        retail_price = #{record.retailPrice,jdbcType=DOUBLE},
	      </if>
	      <if test="record.profitFirst != null">
	        profit_first = #{record.profitFirst,jdbcType=DOUBLE},
	      </if>
	      <if test="record.purchasePrice != null">
	        purchase_price = #{record.purchasePrice,jdbcType=DOUBLE},
	      </if>
	      <if test="record.profitSecond != null">
	        profit_second = #{record.profitSecond,jdbcType=DOUBLE},
	      </if>
	      <if test="record.profitThird != null">
	        profit_third = #{record.profitThird,jdbcType=DOUBLE},
	      </if>
	      <if test="record.score != null">
	        score = #{record.score,jdbcType=INTEGER},
	      </if>
	      <if test="record.quantity != null">
	        quantity = #{record.quantity,jdbcType=INTEGER},
	      </if>
	      <if test="record.state != null">
	        state = #{record.state,jdbcType=INTEGER},
	      </if>
	      <if test="record.createTime != null">
	        create_time = #{record.createTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.createUser != null">
	        create_user = #{record.createUser,jdbcType=VARCHAR},
	      </if>
	      <if test="record.updateTime != null">
	        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.updateUser != null">
	        update_user = #{record.updateUser,jdbcType=VARCHAR},
	      </if>
	</set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateSelectiveByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.ProductPrice">
    update p_product_price 
    <set> 
	      <if test="shopId != null">
	        shop_id = #{shopId,jdbcType=INTEGER},
	      </if>
	      <if test="productId != null">
	        product_id = #{productId,jdbcType=INTEGER},
	      </if>
	      <if test="weight != null">
	        weight = #{weight,jdbcType=DOUBLE},
	      </if>
	      <if test="sku != null">
	        sku = #{sku,jdbcType=VARCHAR},
	      </if>
	      <if test="barCode != null">
	        bar_code = #{barCode,jdbcType=VARCHAR},
	      </if>
	      <if test="marketPrice != null">
	        market_price = #{marketPrice,jdbcType=DOUBLE},
	      </if>
	      <if test="retailPrice != null">
	        retail_price = #{retailPrice,jdbcType=DOUBLE},
	      </if>
	      <if test="profitFirst != null">
	        profit_first = #{profitFirst,jdbcType=DOUBLE},
	      </if>
	      <if test="purchasePrice != null">
	        purchase_price = #{purchasePrice,jdbcType=DOUBLE},
	      </if>
	      <if test="profitSecond != null">
	        profit_second = #{profitSecond,jdbcType=DOUBLE},
	      </if>
	      <if test="profitThird != null">
	        profit_third = #{profitThird,jdbcType=DOUBLE},
	      </if>
	      <if test="score != null">
	        score = #{score,jdbcType=INTEGER},
	      </if>
	      <if test="quantity != null">
	        quantity = #{quantity,jdbcType=INTEGER},
	      </if>
	      <if test="state != null">
	        state = #{state,jdbcType=INTEGER},
	      </if>
	      <if test="createTime != null">
	        create_time = #{createTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="createUser != null">
	        create_user = #{createUser,jdbcType=VARCHAR},
	      </if>
	      <if test="updateTime != null">
	        update_time = #{updateTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="updateUser != null">
	        update_user = #{updateUser,jdbcType=VARCHAR},
	      </if>
	</set>
	where  id = #{id,jdbcType=INTEGER} 
  </update>
  
  <update id="updateByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.ProductPrice">
    update p_product_price set
        shop_id = #{shopId,jdbcType=INTEGER},
        product_id = #{productId,jdbcType=INTEGER},
        weight = #{weight,jdbcType=DOUBLE},
        sku = #{sku,jdbcType=VARCHAR},
        bar_code = #{barCode,jdbcType=VARCHAR},
        market_price = #{marketPrice,jdbcType=DOUBLE},
        retail_price = #{retailPrice,jdbcType=DOUBLE},
        profit_first = #{profitFirst,jdbcType=DOUBLE},
        purchase_price = #{purchasePrice,jdbcType=DOUBLE},
        profit_second = #{profitSecond,jdbcType=DOUBLE},
        profit_third = #{profitThird,jdbcType=DOUBLE},
        score = #{score,jdbcType=INTEGER},
        quantity = #{quantity,jdbcType=INTEGER},
        state = #{state,jdbcType=INTEGER},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        create_user = #{createUser,jdbcType=VARCHAR},
        update_time = #{updateTime,jdbcType=TIMESTAMP},
        update_user = #{updateUser,jdbcType=VARCHAR}
    where  id = #{id,jdbcType=INTEGER} 
  </update>
</mapper>