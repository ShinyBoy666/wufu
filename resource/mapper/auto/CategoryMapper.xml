<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.xinmeng.api.dao.auto.CategoryDao">
  <resultMap id="BaseResultMap" type="cn.xinmeng.api.entity.auto.Category">
	    <id column="id" jdbcType="INTEGER" property="id" />
	   <result column="shop_id" jdbcType="INTEGER" property="shopId" />
	   <result column="category_name" jdbcType="VARCHAR" property="categoryName" />
	   <result column="category_description" jdbcType="VARCHAR" property="categoryDescription" />
	   <result column="first_id" jdbcType="INTEGER" property="firstId" />
	   <result column="second_id" jdbcType="INTEGER" property="secondId" />
	   <result column="ico" jdbcType="VARCHAR" property="ico" />
	   <result column="level" jdbcType="INTEGER" property="level" />
	   <result column="sort" jdbcType="INTEGER" property="sort" />
	   <result column="state" jdbcType="INTEGER" property="state" />
	   <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
	   <result column="create_user" jdbcType="VARCHAR" property="createUser" />
	   <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
	   <result column="update_user" jdbcType="VARCHAR" property="updateUser" />
   </resultMap>
  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  
  <sql id="Base_Column_List">
    id,
    shop_id,
    category_name,
    category_description,
    first_id,
    second_id,
    ico,
    level,
    sort,
    state,
    create_time,
    create_user,
    update_time,
    update_user
  </sql>
  
  <select id="selectByPrimaryKey" parameterType="int" resultMap="BaseResultMap">
    select <include refid="Base_Column_List" /> from p_category  where  id = #{id,jdbcType=INTEGER} 
  </select>
  
  <select id="selectByExample" parameterType="cn.xinmeng.api.entity.auto.example.CategoryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <choose>
	  	<when test="fieldList != null and fieldList != '' "> ${fieldList} </when>
	  	<otherwise> <include refid="Base_Column_List" /> </otherwise>
  	</choose>
    from  p_category
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  
   <delete id="deleteByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.example.CategoryExample">
     delete from  p_category where  id = #{id,jdbcType=INTEGER} 
   </delete>
  
  <delete id="deleteByExample" parameterType="cn.xinmeng.api.entity.auto.example.CategoryExample">
    delete from  p_category
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  <insert id="insert" parameterType="cn.xinmeng.api.entity.auto.Category" useGeneratedKeys="true" keyProperty="id">
    insert into p_category
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="shopId != null">
        shop_id,
      </if>
      <if test="categoryName != null">
        category_name,
      </if>
      <if test="categoryDescription != null">
        category_description,
      </if>
      <if test="firstId != null">
        first_id,
      </if>
      <if test="secondId != null">
        second_id,
      </if>
      <if test="ico != null">
        ico,
      </if>
      <if test="level != null">
        level,
      </if>
      <if test="sort != null">
        sort,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="createUser != null">
        create_user,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
    </trim>
    
    <trim prefix="values (" suffix=")" suffixOverrides=",">
    
      <if test="id != null">
        #{ id,jdbcType=INTEGER },
      </if>
      <if test="shopId != null">
        #{ shopId,jdbcType=INTEGER },
      </if>
      <if test="categoryName != null">
        #{ categoryName,jdbcType=VARCHAR },
      </if>
      <if test="categoryDescription != null">
        #{ categoryDescription,jdbcType=VARCHAR },
      </if>
      <if test="firstId != null">
        #{ firstId,jdbcType=INTEGER },
      </if>
      <if test="secondId != null">
        #{ secondId,jdbcType=INTEGER },
      </if>
      <if test="ico != null">
        #{ ico,jdbcType=VARCHAR },
      </if>
      <if test="level != null">
        #{ level,jdbcType=INTEGER },
      </if>
      <if test="sort != null">
        #{ sort,jdbcType=INTEGER },
      </if>
      <if test="state != null">
        #{ state,jdbcType=INTEGER },
      </if>
      <if test="createTime != null">
        #{ createTime,jdbcType=TIMESTAMP },
      </if>
      <if test="createUser != null">
        #{ createUser,jdbcType=VARCHAR },
      </if>
      <if test="updateTime != null">
        #{ updateTime,jdbcType=TIMESTAMP },
      </if>
      <if test="updateUser != null">
        #{ updateUser,jdbcType=VARCHAR },
      </if>
    </trim>
  </insert>
  
  <insert id="insertBatch" parameterType="java.util.List">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">  
        SELECT LAST_INSERT_ID() as id
    </selectKey>
    insert into p_category 
    (
      shop_id,
      category_name,
      category_description,
      first_id,
      second_id,
      ico,
      level,
      sort,
      state,
      create_time,
      create_user,
      update_time,
      update_user
    )
    values
    <foreach collection="list" item="item" index="index" separator="," >  
    (
     #{ item.shopId,jdbcType=INTEGER },
     #{ item.categoryName,jdbcType=VARCHAR },
     #{ item.categoryDescription,jdbcType=VARCHAR },
     #{ item.firstId,jdbcType=INTEGER },
     #{ item.secondId,jdbcType=INTEGER },
     #{ item.ico,jdbcType=VARCHAR },
     #{ item.level,jdbcType=INTEGER },
     #{ item.sort,jdbcType=INTEGER },
     #{ item.state,jdbcType=INTEGER },
     #{ item.createTime,jdbcType=TIMESTAMP },
     #{ item.createUser,jdbcType=VARCHAR },
     #{ item.updateTime,jdbcType=TIMESTAMP },
     #{ item.updateUser,jdbcType=VARCHAR }
    )  
    </foreach>  
  </insert>
  
  <select id="countByExample" parameterType="cn.xinmeng.api.entity.auto.example.CategoryExample" resultType="java.lang.Integer">
    select count(*) from p_category
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  
  <update id="updateByExample" parameterType="map">
    update p_category set 
	      shop_id = #{record.shopId,jdbcType=INTEGER},
	      category_name = #{record.categoryName,jdbcType=VARCHAR},
	      category_description = #{record.categoryDescription,jdbcType=VARCHAR},
	      first_id = #{record.firstId,jdbcType=INTEGER},
	      second_id = #{record.secondId,jdbcType=INTEGER},
	      ico = #{record.ico,jdbcType=VARCHAR},
	      level = #{record.level,jdbcType=INTEGER},
	      sort = #{record.sort,jdbcType=INTEGER},
	      state = #{record.state,jdbcType=INTEGER},
	      create_time = #{record.createTime,jdbcType=TIMESTAMP},
	      create_user = #{record.createUser,jdbcType=VARCHAR},
	      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
	      update_user = #{record.updateUser,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateByExampleSelective" parameterType="map">
    update p_category 
    <set> 
	      <if test="record.shopId != null">
	        shop_id = #{record.shopId,jdbcType=INTEGER},
	      </if>
	      <if test="record.categoryName != null">
	        category_name = #{record.categoryName,jdbcType=VARCHAR},
	      </if>
	      <if test="record.categoryDescription != null">
	        category_description = #{record.categoryDescription,jdbcType=VARCHAR},
	      </if>
	      <if test="record.firstId != null">
	        first_id = #{record.firstId,jdbcType=INTEGER},
	      </if>
	      <if test="record.secondId != null">
	        second_id = #{record.secondId,jdbcType=INTEGER},
	      </if>
	      <if test="record.ico != null">
	        ico = #{record.ico,jdbcType=VARCHAR},
	      </if>
	      <if test="record.level != null">
	        level = #{record.level,jdbcType=INTEGER},
	      </if>
	      <if test="record.sort != null">
	        sort = #{record.sort,jdbcType=INTEGER},
	      </if>
	      <if test="record.state != null">
	        state = #{record.state,jdbcType=INTEGER},
	      </if>
	      <if test="record.createTime != null">
	        create_time = #{record.createTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.createUser != null">
	        create_user = #{record.createUser,jdbcType=VARCHAR},
	      </if>
	      <if test="record.updateTime != null">
	        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="record.updateUser != null">
	        update_user = #{record.updateUser,jdbcType=VARCHAR},
	      </if>
	</set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  <update id="updateSelectiveByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.Category">
    update p_category 
    <set> 
	      <if test="shopId != null">
	        shop_id = #{shopId,jdbcType=INTEGER},
	      </if>
	      <if test="categoryName != null">
	        category_name = #{categoryName,jdbcType=VARCHAR},
	      </if>
	      <if test="categoryDescription != null">
	        category_description = #{categoryDescription,jdbcType=VARCHAR},
	      </if>
	      <if test="firstId != null">
	        first_id = #{firstId,jdbcType=INTEGER},
	      </if>
	      <if test="secondId != null">
	        second_id = #{secondId,jdbcType=INTEGER},
	      </if>
	      <if test="ico != null">
	        ico = #{ico,jdbcType=VARCHAR},
	      </if>
	      <if test="level != null">
	        level = #{level,jdbcType=INTEGER},
	      </if>
	      <if test="sort != null">
	        sort = #{sort,jdbcType=INTEGER},
	      </if>
	      <if test="state != null">
	        state = #{state,jdbcType=INTEGER},
	      </if>
	      <if test="createTime != null">
	        create_time = #{createTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="createUser != null">
	        create_user = #{createUser,jdbcType=VARCHAR},
	      </if>
	      <if test="updateTime != null">
	        update_time = #{updateTime,jdbcType=TIMESTAMP},
	      </if>
	      <if test="updateUser != null">
	        update_user = #{updateUser,jdbcType=VARCHAR},
	      </if>
	</set>
	where  id = #{id,jdbcType=INTEGER} 
  </update>
  
  <update id="updateByPrimaryKey" parameterType="cn.xinmeng.api.entity.auto.Category">
    update p_category set
        shop_id = #{shopId,jdbcType=INTEGER},
        category_name = #{categoryName,jdbcType=VARCHAR},
        category_description = #{categoryDescription,jdbcType=VARCHAR},
        first_id = #{firstId,jdbcType=INTEGER},
        second_id = #{secondId,jdbcType=INTEGER},
        ico = #{ico,jdbcType=VARCHAR},
        level = #{level,jdbcType=INTEGER},
        sort = #{sort,jdbcType=INTEGER},
        state = #{state,jdbcType=INTEGER},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        create_user = #{createUser,jdbcType=VARCHAR},
        update_time = #{updateTime,jdbcType=TIMESTAMP},
        update_user = #{updateUser,jdbcType=VARCHAR}
    where  id = #{id,jdbcType=INTEGER} 
  </update>
</mapper>